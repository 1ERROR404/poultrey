import React, { useState, useEffect } from 'react';
import { useParams, useLocation } from 'wouter';
import { useQuery, useMutation } from '@tanstack/react-query';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import { 
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage 
} from '@/components/ui/form';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { Loader2, ArrowLeft, Save, Plus, Trash2, Info, ThumbsUp, Image, FileText, Palette, Type } from 'lucide-react';
import AdminLayout from '@/components/admin/admin-layout';
import { SectionHeader } from '@/components/admin/section-header';
import { Separator } from '@/components/ui/separator';
import { Card, CardContent } from '@/components/ui/card';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';

// Form validation schema
const productSchema = z.object({
  name: z.string().min(3, { message: 'Product name must be at least 3 characters' }),
  nameAr: z.string().optional(),
  description: z.string().min(10, { message: 'Description must be at least 10 characters' }),
  descriptionAr: z.string().optional(),
  price: z.string().refine(val => !isNaN(parseFloat(val)), { message: 'Price must be a valid number' }),
  originalPrice: z.string().optional().refine(val => !val || !isNaN(parseFloat(val)), { 
    message: 'Original price must be a valid number' 
  }),
  imageUrl: z.string().url({ message: 'Please enter a valid URL for the image' }),
  additionalImages: z.array(z.string()).optional().default([]),
  specs: z.record(z.string()).optional().default({}),
  features: z.array(z.string()).optional().default([]),
  // Additional content sections
  keyFeatures: z.string().optional(),
  keyFeaturesTitle: z.string().optional().default('Key Features'),
  keyBenefits: z.string().optional(),
  keyBenefitsTitle: z.string().optional().default('Key Benefits'),
  useCaseCommercial: z.string().optional(),
  useCaseCommercialTitle: z.string().optional().default('Commercial Farms'),
  useCaseBackyard: z.string().optional(),
  useCaseBackyardTitle: z.string().optional().default('Backyard Coops'),
  maintenanceTips: z.string().optional(),
  maintenanceTipsTitle: z.string().optional().default('Maintenance Tips'),
  // Arabic content sections
  keyFeaturesAr: z.string().optional(),
  keyFeaturesTitleAr: z.string().optional().default('الميزات الرئيسية'),
  keyBenefitsAr: z.string().optional(),
  keyBenefitsTitleAr: z.string().optional().default('الفوائد الرئيسية'),
  useCaseCommercialAr: z.string().optional(),
  useCaseCommercialTitleAr: z.string().optional().default('المزارع التجارية'),
  useCaseBackyardAr: z.string().optional(),
  useCaseBackyardTitleAr: z.string().optional().default('أقفاص الفناء الخلفي'),
  maintenanceTipsAr: z.string().optional(),
  maintenanceTipsTitleAr: z.string().optional().default('نصائح الصيانة'),
  // Regular product fields
  sku: z.string().optional(),
  weight: z.string().optional(),
  dimensions: z.string().optional(),
  warrantyInfo: z.string().optional(),
  categoryId: z.string().refine(val => !isNaN(parseInt(val)), { message: 'Please select a category' }),
  slug: z.string().min(3, { message: 'Slug must be at least 3 characters' })
    .refine(val => /^[a-z0-9-]+$/.test(val), { 
      message: 'Slug can only contain lowercase letters, numbers, and hyphens' 
    }),
  featured: z.boolean().default(false),
  inStock: z.boolean().default(true),
  quantity: z.number().optional(),
  tags: z.array(z.string()).optional(),
  metaTitle: z.string().optional(),
  metaDescription: z.string().optional(),
});

type ProductFormValues = z.infer<typeof productSchema>;

export default function ProductForm() {
  const { slug } = useParams();
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const isEditing = slug !== 'new';

  // Get product data if editing
  const { data: product, isLoading: isLoadingProduct } = useQuery({
    queryKey: [`/api/admin/products/${slug}`],
    queryFn: async () => {
      if (!isEditing) return null;
      
      try {
        const response = await apiRequest('GET', `/api/admin/products/${slug}`);
        if (!response.ok) {
          throw new Error('Failed to fetch product');
        }
        return await response.json();
      } catch (error) {
        console.error('Error fetching product:', error);
        toast({
          title: 'Error',
          description: 'Failed to load product data. Please try again.',
          variant: 'destructive',
        });
        throw error;
      }
    },
    enabled: isEditing,
  });

  // Get categories for the dropdown
  const { data: categories, isLoading: isLoadingCategories } = useQuery({
    queryKey: ['/api/categories'],
    queryFn: async () => {
      const response = await apiRequest('GET', '/api/categories');
      return await response.json();
    },
  });

  // Form setup
  const form = useForm<ProductFormValues>({
    resolver: zodResolver(productSchema),
    defaultValues: {
      name: '',
      nameAr: '',
      description: '',
      descriptionAr: '',
      price: '',
      originalPrice: '',
      imageUrl: '',
      additionalImages: [],
      specs: {},
      features: [],
      // Additional content sections
      keyFeatures: '',
      keyFeaturesTitle: 'Key Features',
      keyBenefits: '',
      keyBenefitsTitle: 'Key Benefits',
      useCaseCommercial: '',
      useCaseCommercialTitle: 'Commercial Farms',
      useCaseBackyard: '',
      useCaseBackyardTitle: 'Backyard Coops',
      maintenanceTips: '',
      maintenanceTipsTitle: 'Maintenance Tips',
      // Arabic content sections
      keyFeaturesAr: '',
      keyFeaturesTitleAr: 'الميزات الرئيسية',
      keyBenefitsAr: '',
      keyBenefitsTitleAr: 'الفوائد الرئيسية',
      useCaseCommercialAr: '',
      useCaseCommercialTitleAr: 'المزارع التجارية',
      useCaseBackyardAr: '',
      useCaseBackyardTitleAr: 'أقفاص الفناء الخلفي',
      maintenanceTipsAr: '',
      maintenanceTipsTitleAr: 'نصائح الصيانة',
      // Regular product fields
      sku: '',
      weight: '',
      dimensions: '',
      warrantyInfo: '',
      categoryId: '',
      slug: '',
      featured: false,
      inStock: true,
      quantity: 0,
      tags: [],
      metaTitle: '',
      metaDescription: '',
    },
  });

  // Update form when product data loads
  useEffect(() => {
    if (product && isEditing) {
      form.reset({
        name: product.name,
        nameAr: product.nameAr || '',
        description: product.description || '',
        descriptionAr: product.descriptionAr || '',
        price: product.price.toString().replace(/[^0-9.]/g, ''), // Remove currency symbols
        originalPrice: product.originalPrice ? product.originalPrice.toString().replace(/[^0-9.]/g, '') : '',
        imageUrl: product.imageUrl,
        additionalImages: product.additionalImages || [],
        specs: product.specs || {},
        features: product.features || [],
        // Additional content sections for rich descriptions
        keyFeatures: product.keyFeatures || 'This product is designed specifically for poultry farmers who value efficiency, durability, and the welfare of their birds.',
        keyFeaturesTitle: product.keyFeaturesTitle || 'Key Features',
        keyBenefits: product.keyBenefits || '- Designed for optimal poultry health and nutrition\n- Constructed from durable, food-safe materials\n- Easy to clean and maintain\n- Suitable for both commercial and backyard poultry operations\n- Weather resistant for indoor and outdoor use',
        keyBenefitsTitle: product.keyBenefitsTitle || 'Key Benefits',
        useCaseCommercial: product.useCaseCommercial || 'Ideal for large-scale operations requiring reliable and efficient equipment that can withstand continuous use.',
        useCaseCommercialTitle: product.useCaseCommercialTitle || 'Commercial Farms',
        useCaseBackyard: product.useCaseBackyard || 'Perfect for small operations where quality and ease of use are prioritized for hobbyist poultry keepers.',
        useCaseBackyardTitle: product.useCaseBackyardTitle || 'Backyard Coops',
        maintenanceTips: product.maintenanceTips || '1. Clean regularly with warm, soapy water\n2. Check for damage or wear every 3-6 months\n3. Store in a dry location when not in use\n4. Apply food-grade lubricant to moving parts as needed',
        maintenanceTipsTitle: product.maintenanceTipsTitle || 'Maintenance Tips',
        // Arabic content sections
        keyFeaturesAr: product.keyFeaturesAr || '',
        keyFeaturesTitleAr: product.keyFeaturesTitleAr || 'الميزات الرئيسية',
        keyBenefitsAr: product.keyBenefitsAr || '',
        keyBenefitsTitleAr: product.keyBenefitsTitleAr || 'الفوائد الرئيسية',
        useCaseCommercialAr: product.useCaseCommercialAr || '',
        useCaseCommercialTitleAr: product.useCaseCommercialTitleAr || 'المزارع التجارية',
        useCaseBackyardAr: product.useCaseBackyardAr || '',
        useCaseBackyardTitleAr: product.useCaseBackyardTitleAr || 'أقفاص الفناء الخلفي',
        maintenanceTipsAr: product.maintenanceTipsAr || '',
        maintenanceTipsTitleAr: product.maintenanceTipsTitleAr || 'نصائح الصيانة',
        // Regular product fields
        sku: product.sku || '',
        weight: product.weight || '',
        dimensions: product.dimensions || '',
        warrantyInfo: product.warrantyInfo || '',
        categoryId: product.categoryId?.toString() || '',
        slug: product.slug || '',
        featured: product.featured || false,
        inStock: product.inStock,
        quantity: product.quantity || 0,
        tags: product.tags || [],
        metaTitle: product.metaTitle || '',
        metaDescription: product.metaDescription || '',
      });
    }
  }, [product, form, isEditing]);

  // Create or update product mutation
  const mutation = useMutation({
    mutationFn: async (data: ProductFormValues) => {
      // Convert string values to appropriate types
      const payload = {
        ...data,
        price: parseFloat(data.price),
        originalPrice: data.originalPrice ? parseFloat(data.originalPrice) : undefined,
        categoryId: parseInt(data.categoryId),
      };
      
      if (isEditing) {
        // Update existing product
        const response = await apiRequest('PATCH', `/api/admin/products/${product?.id}`, payload);
        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.message || 'Failed to update product');
        }
        return await response.json();
      } else {
        // Create new product
        const response = await apiRequest('POST', '/api/admin/products', payload);
        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.message || 'Failed to create product');
        }
        return await response.json();
      }
    },
    onSuccess: () => {
      toast({
        title: isEditing ? 'Product Updated' : 'Product Created',
        description: isEditing ? 'The product has been successfully updated.' : 'The product has been successfully created.',
      });
      
      // Invalidate queries to refetch the data
      queryClient.invalidateQueries({ queryKey: ['/api/admin/products'] });
      queryClient.invalidateQueries({ queryKey: ['/api/products'] });
      
      // Navigate back to products list
      navigate('/admin/products');
    },
    onError: (error: Error) => {
      toast({
        title: 'Error',
        description: error.message || 'Something went wrong. Please try again.',
        variant: 'destructive',
      });
    },
  });

  const onSubmit = (values: ProductFormValues) => {
    mutation.mutate(values);
  };

  if (isLoadingProduct && isEditing) {
    return (
      <AdminLayout>
        <div className="flex items-center justify-center min-h-[50vh]">
          <Loader2 className="h-8 w-8 animate-spin" />
          <span className="ml-2">Loading product...</span>
        </div>
      </AdminLayout>
    );
  }

  return (
    <AdminLayout>
      <SectionHeader
        title={isEditing ? 'Edit Product' : 'Create Product'}
        description={isEditing ? 'Update product information' : 'Add a new product to your store'}
        actions={
          <Button variant="outline" onClick={() => navigate('/admin/products')}>
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Products
          </Button>
        }
      />

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="md:col-span-2 space-y-6">
              <Card>
                <CardContent className="pt-6">
                  <div className="space-y-4">
                    <FormField
                      control={form.control}
                      name="name"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Product Name (English)</FormLabel>
                          <FormControl>
                            <Input placeholder="e.g. Automatic Chicken Feeder" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={form.control}
                      name="nameAr"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Product Name (Arabic)</FormLabel>
                          <FormControl>
                            <Input placeholder="e.g. معلفة دجاج أوتوماتيكية" {...field} />
                          </FormControl>
                          <FormDescription>Optional Arabic translation</FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={form.control}
                      name="slug"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Product Slug</FormLabel>
                          <FormControl>
                            <Input placeholder="e.g. automatic-chicken-feeder" {...field} />
                          </FormControl>
                          <FormDescription>Used in the URL, must be unique and contain only lowercase letters, numbers, and hyphens</FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name="price"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Price</FormLabel>
                            <FormControl>
                              <Input placeholder="e.g. 89.99" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="originalPrice"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Original Price</FormLabel>
                            <FormControl>
                              <Input placeholder="e.g. 99.99" {...field} />
                            </FormControl>
                            <FormDescription>Optional. For displaying discounts</FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    
                    <h3 className="text-lg font-medium mb-4 mt-2 flex items-center">
                      <FileText className="h-5 w-5 mr-2 text-green-600" />
                      Product Description (English)
                    </h3>
                    
                    <div className="bg-gradient-to-r from-green-50 to-blue-50 border border-gray-200 rounded-md p-5 mb-6">
                      <div className="flex items-center justify-between mb-3">
                        <div className="flex items-center">
                          <Type className="h-5 w-5 text-green-600 mr-2" />
                          <h4 className="text-md font-medium text-gray-800">Enhanced Description Editor</h4>
                        </div>
                        <div className="flex space-x-2">
                          <Button 
                            type="button" 
                            variant="outline" 
                            size="sm" 
                            className="flex items-center bg-white" 
                            onClick={() => form.setValue('description', '')}
                          >
                            <Trash2 className="h-3.5 w-3.5 mr-1 text-red-500" />
                            Clear
                          </Button>
                        </div>
                      </div>
                      
                      <FormField
                        control={form.control}
                        name="description"
                        render={({ field }) => (
                          <FormItem className="space-y-3">
                            <FormLabel className="text-gray-700 font-medium">Main Description</FormLabel>
                            <div className="bg-white border border-gray-200 rounded-md">
                              <FormControl>
                                <ReactQuill 
                                  theme="snow"
                                  placeholder="Enter rich formatted product description..." 
                                  modules={{
                                    toolbar: [
                                      [{ 'header': [1, 2, 3, false] }],
                                      ['bold', 'italic', 'underline', 'strike'],
                                      [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                                      [{ 'color': [] }, { 'background': [] }],
                                      ['link', 'image'],
                                      ['clean']
                                    ],
                                  }}
                                  value={field.value || ''}
                                  onChange={field.onChange}
                                  className="min-h-32 rounded-md"
                                  style={{ height: '200px' }}
                                />
                              </FormControl>
                            </div>
                            <FormDescription className="flex items-center text-sm text-gray-600">
                              <Info className="h-4 w-4 text-blue-500 mr-1" />
                              Format your description with styles, lists, links and even images for better product presentation.
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    
                    <div className="bg-amber-50 border border-amber-200 rounded-md p-4 mt-2 mb-4">
                      <div className="flex items-center mb-2">
                        <Info className="h-5 w-5 text-amber-500 mr-2" />
                        <span className="text-sm font-medium text-amber-700">Preview: First Sentence (Used as Summary)</span>
                      </div>
                      <div className="p-3 bg-white border border-amber-100 rounded text-sm">
                        {form.watch("description")?.replace(/<[^>]*>/g, '')?.split('.')?.length > 0 
                          ? form.watch("description").replace(/<[^>]*>/g, '').split('.')[0] + '.'
                          : 'No description available'}
                      </div>
                    </div>

                    {/* Additional content sections removed as per product page simplification */}
                    <div className="bg-blue-50 border border-blue-200 rounded-md p-4 mt-6">
                      <div className="flex items-center">
                        <Info className="h-5 w-5 text-blue-500 mr-2" />
                        <p className="text-sm text-blue-700 font-medium">Content sections have been simplified</p>
                      </div>
                      <p className="text-sm text-blue-600 mt-2">
                        The product detail page now only shows the main description. Additional content sections (key features, benefits, use cases, maintenance tips) have been removed from the display but are still stored in the database for backward compatibility.
                      </p>
                    </div>

                    {/* The following sections are hidden and preserved for data compatibility */}
                    <div className="hidden space-y-4 mt-6">
                      <div className="bg-green-50 border border-gray-200 rounded-md p-4">
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="text-green-800 font-semibold text-md flex items-center">
                            <ThumbsUp className="h-5 w-5 mr-2" /> 
                            <FormField
                              control={form.control}
                              name="keyFeaturesTitle"
                              render={({ field }) => (
                                <div className="flex items-center">
                                  <FormControl>
                                    <Input 
                                      className="text-green-800 font-semibold text-md bg-transparent border-0 border-b border-green-300 rounded-none p-0 h-7 w-40 focus-visible:ring-0 focus-visible:ring-offset-0" 
                                      {...field} 
                                    />
                                  </FormControl>
                                </div>
                              )}
                            />
                          </h4>
                          <FormDescription className="text-xs mt-0">Custom section title</FormDescription>
                        </div>
                        <FormField
                          control={form.control}
                          name="keyFeatures"
                          render={({ field }) => (
                            <FormItem>
                              <FormControl>
                                <Textarea 
                                  placeholder="This product is designed specifically for poultry farmers who value efficiency, durability, and the welfare of their birds." 
                                  className="min-h-20" 
                                  value={field.value || ''}
                                  onChange={field.onChange}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>

                      <div className="border border-gray-200 rounded-md p-4">
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="font-semibold text-md flex items-center">
                            <FormField
                              control={form.control}
                              name="keyBenefitsTitle"
                              render={({ field }) => (
                                <FormControl>
                                  <Input 
                                    className="font-semibold text-md bg-transparent border-0 border-b border-gray-300 rounded-none p-0 h-7 w-40 focus-visible:ring-0 focus-visible:ring-offset-0" 
                                    {...field} 
                                  />
                                </FormControl>
                              )}
                            />
                          </h4>
                          <FormDescription className="text-xs mt-0">Custom section title</FormDescription>
                        </div>
                        <FormField
                          control={form.control}
                          name="keyBenefits"
                          render={({ field }) => (
                            <FormItem>
                              <FormControl>
                                <Textarea 
                                  placeholder="- Designed for optimal poultry health and nutrition
- Constructed from durable, food-safe materials
- Easy to clean and maintain
- Suitable for both commercial and backyard poultry operations
- Weather resistant for indoor and outdoor use" 
                                  className="min-h-32" 
                                  value={field.value || ''}
                                  onChange={field.onChange}
                                />
                              </FormControl>
                              <FormDescription>
                                Enter benefits as bullet points starting with hyphens (-).
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>

                      <div className="border border-gray-200 rounded-md p-4">
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="font-semibold text-md flex items-center">
                            <FormField
                              control={form.control}
                              name="useCasesTitle"
                              render={({ field }) => (
                                <FormControl>
                                  <Input 
                                    className="font-semibold text-md bg-transparent border-0 border-b border-gray-300 rounded-none p-0 h-7 w-40 focus-visible:ring-0 focus-visible:ring-offset-0" 
                                    {...field} 
                                  />
                                </FormControl>
                              )}
                            />
                          </h4>
                          <FormDescription className="text-xs mt-0">Custom section title</FormDescription>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <FormField
                            control={form.control}
                            name="useCaseCommercial"
                            render={({ field }) => (
                              <FormItem>
                                <div className="flex items-center justify-between">
                                  <FormField
                                    control={form.control}
                                    name="useCaseCommercialTitle"
                                    render={({ field }) => (
                                      <FormControl>
                                        <Input 
                                          className="font-medium text-sm bg-transparent border-0 border-b border-gray-300 rounded-none p-0 h-7 w-40 mb-1 focus-visible:ring-0 focus-visible:ring-offset-0" 
                                          {...field} 
                                        />
                                      </FormControl>
                                    )}
                                  />
                                </div>
                                <FormControl>
                                  <Textarea 
                                    placeholder="Ideal for large-scale operations requiring reliable and efficient equipment that can withstand continuous use." 
                                    className="min-h-20" 
                                    value={field.value || ''}
                                    onChange={field.onChange}
                                  />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={form.control}
                            name="useCaseBackyard"
                            render={({ field }) => (
                              <FormItem>
                                <div className="flex items-center justify-between">
                                  <FormField
                                    control={form.control}
                                    name="useCaseBackyardTitle"
                                    render={({ field }) => (
                                      <FormControl>
                                        <Input 
                                          className="font-medium text-sm bg-transparent border-0 border-b border-gray-300 rounded-none p-0 h-7 w-40 mb-1 focus-visible:ring-0 focus-visible:ring-offset-0" 
                                          {...field} 
                                        />
                                      </FormControl>
                                    )}
                                  />
                                </div>
                                <FormControl>
                                  <Textarea 
                                    placeholder="Perfect for small operations where quality and ease of use are prioritized for hobbyist poultry keepers." 
                                    className="min-h-20" 
                                    value={field.value || ''}
                                    onChange={field.onChange}
                                  />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>
                      </div>

                      <div className="border border-gray-200 rounded-md p-4">
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="font-semibold text-md flex items-center">
                            <FormField
                              control={form.control}
                              name="maintenanceTipsTitle"
                              render={({ field }) => (
                                <FormControl>
                                  <Input 
                                    className="font-semibold text-md bg-transparent border-0 border-b border-gray-300 rounded-none p-0 h-7 w-40 focus-visible:ring-0 focus-visible:ring-offset-0" 
                                    {...field} 
                                  />
                                </FormControl>
                              )}
                            />
                          </h4>
                          <FormDescription className="text-xs mt-0">Custom section title</FormDescription>
                        </div>
                        <FormField
                          control={form.control}
                          name="maintenanceTips"
                          render={({ field }) => (
                            <FormItem>
                              <FormControl>
                                <Textarea 
                                  placeholder="1. Clean regularly with warm, soapy water
2. Check for damage or wear every 3-6 months
3. Store in a dry location when not in use
4. Apply food-grade lubricant to moving parts as needed" 
                                  className="min-h-32" 
                                  value={field.value || ''}
                                  onChange={field.onChange}
                                />
                              </FormControl>
                              <FormDescription>
                                Enter maintenance tips as a numbered list.
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                    </div>
                    
                    <h3 className="text-lg font-medium mb-4 mt-6 flex items-center">
                      <FileText className="h-5 w-5 ml-2 text-green-600" />
                      <span className="flex-grow text-right">وصف المنتج (العربية)</span>
                    </h3>
                    
                    <div className="bg-gradient-to-r from-blue-50 to-green-50 border border-gray-200 rounded-md p-5 mb-6">
                      <div className="flex items-center justify-between mb-3">
                        <div className="flex space-x-2">
                          <Button 
                            type="button" 
                            variant="outline" 
                            size="sm" 
                            className="flex items-center bg-white" 
                            onClick={() => form.setValue('descriptionAr', '')}
                          >
                            <Trash2 className="h-3.5 w-3.5 ml-1 text-red-500" />
                            مسح
                          </Button>
                        </div>
                        <div className="flex items-center">
                          <h4 className="text-md font-medium text-gray-800 text-right">محرر الوصف المحسن</h4>
                          <Type className="h-5 w-5 ml-2 text-green-600" />
                        </div>
                      </div>
                      
                      <FormField
                        control={form.control}
                        name="descriptionAr"
                        render={({ field }) => (
                          <FormItem className="space-y-3">
                            <FormLabel className="text-gray-700 font-medium block text-right">الوصف الرئيسي</FormLabel>
                            <div className="bg-white border border-gray-200 rounded-md" dir="rtl">
                              <FormControl>
                                <ReactQuill 
                                  theme="snow"
                                  placeholder="أدخل وصف المنتج بتنسيق غني..." 
                                  modules={{
                                    toolbar: [
                                      [{ 'header': [1, 2, 3, false] }],
                                      ['bold', 'italic', 'underline', 'strike'],
                                      [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                                      [{ 'color': [] }, { 'background': [] }],
                                      ['link', 'image'],
                                      ['clean']
                                    ],
                                  }}
                                  value={field.value || ''}
                                  onChange={field.onChange}
                                  className="min-h-32 rounded-md text-right"
                                  style={{ height: '200px', direction: 'rtl' }}
                                />
                              </FormControl>
                            </div>
                            <FormDescription className="flex items-center text-sm text-gray-600 flex-row-reverse">
                              نسق وصفك بأنماط، قوائم، روابط وحتى صور لعرض أفضل للمنتج.
                              <Info className="h-4 w-4 text-blue-500 ml-1" />
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    
                    <div className="bg-amber-50 border border-amber-200 rounded-md p-4 mt-2 mb-4">
                      <div className="flex items-center mb-2 flex-row-reverse">
                        <Info className="h-5 w-5 text-amber-500 ml-2" />
                        <span className="text-sm font-medium text-amber-700 text-right">معاينة: الجملة الأولى (تستخدم كملخص)</span>
                      </div>
                      <div className="p-3 bg-white border border-amber-100 rounded text-sm text-right" dir="rtl">
                        {form.watch("descriptionAr")?.replace(/<[^>]*>/g, '')?.split('.')?.length > 0 
                          ? form.watch("descriptionAr").replace(/<[^>]*>/g, '').split('.')[0] + '.'
                          : 'لا يوجد وصف متاح'}
                      </div>
                    </div>
                    
                    {/* Additional Arabic content sections removed as per product page simplification */}
                    <div className="bg-blue-50 border border-blue-200 rounded-md p-4 mt-6">
                      <div className="flex items-center">
                        <Info className="h-5 w-5 text-blue-500 mr-2" />
                        <p className="text-sm text-blue-700 font-medium" dir="rtl">تم تبسيط أقسام المحتوى</p>
                      </div>
                      <p className="text-sm text-blue-600 mt-2" dir="rtl">
                        تعرض صفحة تفاصيل المنتج الآن الوصف الرئيسي فقط. تمت إزالة أقسام المحتوى الإضافية (الميزات الرئيسية والفوائد وحالات الاستخدام ونصائح الصيانة) من العرض ولكنها لا تزال مخزنة في قاعدة البيانات للتوافق مع الإصدارات السابقة.
                      </p>
                    </div>

                    {/* The following sections are hidden and preserved for data compatibility */}
                    <div className="hidden space-y-4 mt-6">
                      <div className="bg-green-50 border border-gray-200 rounded-md p-4">
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="text-green-800 font-semibold text-md flex items-center">
                            <ThumbsUp className="h-5 w-5 ml-2" />
                            <FormField
                              control={form.control}
                              name="keyFeaturesTitleAr"
                              render={({ field }) => (
                                <FormControl>
                                  <Input 
                                    className="text-green-800 font-semibold text-md bg-transparent border-0 border-b border-green-300 rounded-none p-0 h-7 w-40 text-right focus-visible:ring-0 focus-visible:ring-offset-0" 
                                    dir="rtl"
                                    {...field} 
                                  />
                                </FormControl>
                              )}
                            />
                          </h4>
                          <FormDescription className="text-xs mt-0">عنوان القسم المخصص</FormDescription>
                        </div>
                        <FormField
                          control={form.control}
                          name="keyFeaturesAr"
                          render={({ field }) => (
                            <FormItem>
                              <FormControl>
                                <Textarea 
                                  placeholder="تم تصميم هذا المنتج خصيصًا لمزارعي الدواجن الذين يقدرون الكفاءة والمتانة ورفاهية طيورهم."
                                  className="min-h-20 text-right" 
                                  dir="rtl"
                                  value={field.value || ''}
                                  onChange={field.onChange}
                                />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>

                      <div className="border border-gray-200 rounded-md p-4">
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="font-semibold text-md flex items-center">
                            <FormField
                              control={form.control}
                              name="keyBenefitsTitleAr"
                              render={({ field }) => (
                                <FormControl>
                                  <Input 
                                    className="font-semibold text-md bg-transparent border-0 border-b border-gray-300 rounded-none p-0 h-7 w-40 text-right focus-visible:ring-0 focus-visible:ring-offset-0" 
                                    dir="rtl"
                                    {...field} 
                                  />
                                </FormControl>
                              )}
                            />
                          </h4>
                          <FormDescription className="text-xs mt-0">عنوان القسم المخصص</FormDescription>
                        </div>
                        <FormField
                          control={form.control}
                          name="keyBenefitsAr"
                          render={({ field }) => (
                            <FormItem>
                              <FormControl>
                                <Textarea 
                                  placeholder="- مصمم للصحة المثلى للدواجن والتغذية
- مصنوع من مواد متينة وآمنة للغذاء
- سهل التنظيف والصيانة
- مناسب لعمليات الدواجن التجارية وفي الفناء الخلفي
- مقاوم للطقس للاستخدام الداخلي والخارجي" 
                                  className="min-h-32 text-right" 
                                  dir="rtl"
                                  value={field.value || ''}
                                  onChange={field.onChange}
                                />
                              </FormControl>
                              <FormDescription>
                                أدخل الفوائد كنقاط برصاص تبدأ بشرطات (-).
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>

                      <div className="border border-gray-200 rounded-md p-4">
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="font-semibold text-md flex items-center">
                            <FormField
                              control={form.control}
                              name="useCasesTitleAr"
                              render={({ field }) => (
                                <FormControl>
                                  <Input 
                                    className="font-semibold text-md bg-transparent border-0 border-b border-gray-300 rounded-none p-0 h-7 w-40 text-right focus-visible:ring-0 focus-visible:ring-offset-0" 
                                    dir="rtl"
                                    {...field} 
                                  />
                                </FormControl>
                              )}
                            />
                          </h4>
                          <FormDescription className="text-xs mt-0">عنوان القسم المخصص</FormDescription>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <FormField
                            control={form.control}
                            name="useCaseCommercialAr"
                            render={({ field }) => (
                              <FormItem>
                                <div className="flex items-center justify-between">
                                  <FormField
                                    control={form.control}
                                    name="useCaseCommercialTitleAr"
                                    render={({ field }) => (
                                      <FormControl>
                                        <Input 
                                          className="font-medium text-sm bg-transparent border-0 border-b border-gray-300 rounded-none p-0 h-7 w-40 text-right mb-1 focus-visible:ring-0 focus-visible:ring-offset-0" 
                                          dir="rtl"
                                          {...field} 
                                        />
                                      </FormControl>
                                    )}
                                  />
                                </div>
                                <FormControl>
                                  <Textarea 
                                    placeholder="مثالي للعمليات واسعة النطاق التي تتطلب معدات موثوقة وفعالة يمكن أن تتحمل الاستخدام المستمر." 
                                    className="min-h-20 text-right" 
                                    dir="rtl"
                                    value={field.value || ''}
                                    onChange={field.onChange}
                                  />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={form.control}
                            name="useCaseBackyardAr"
                            render={({ field }) => (
                              <FormItem>
                                <div className="flex items-center justify-between">
                                  <FormField
                                    control={form.control}
                                    name="useCaseBackyardTitleAr"
                                    render={({ field }) => (
                                      <FormControl>
                                        <Input 
                                          className="font-medium text-sm bg-transparent border-0 border-b border-gray-300 rounded-none p-0 h-7 w-40 text-right mb-1 focus-visible:ring-0 focus-visible:ring-offset-0" 
                                          dir="rtl"
                                          {...field} 
                                        />
                                      </FormControl>
                                    )}
                                  />
                                </div>
                                <FormControl>
                                  <Textarea 
                                    placeholder="مثالي للعمليات الصغيرة حيث تكون الجودة وسهولة الاستخدام أولوية لمربي الدواجن كهواية." 
                                    className="min-h-20 text-right" 
                                    dir="rtl"
                                    value={field.value || ''}
                                    onChange={field.onChange}
                                  />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>
                      </div>

                      <div className="border border-gray-200 rounded-md p-4">
                        <div className="flex items-center justify-between mb-3">
                          <h4 className="font-semibold text-md flex items-center">
                            <FormField
                              control={form.control}
                              name="maintenanceTipsTitleAr"
                              render={({ field }) => (
                                <FormControl>
                                  <Input 
                                    className="font-semibold text-md bg-transparent border-0 border-b border-gray-300 rounded-none p-0 h-7 w-40 text-right focus-visible:ring-0 focus-visible:ring-offset-0" 
                                    dir="rtl"
                                    {...field} 
                                  />
                                </FormControl>
                              )}
                            />
                          </h4>
                          <FormDescription className="text-xs mt-0">عنوان القسم المخصص</FormDescription>
                        </div>
                        <FormField
                          control={form.control}
                          name="maintenanceTipsAr"
                          render={({ field }) => (
                            <FormItem>
                              <FormControl>
                                <Textarea 
                                  placeholder="1. تنظيف بانتظام بالماء الدافئ والصابون
2. تحقق من وجود أضرار أو تآكل كل 3-6 أشهر
3. تخزين في مكان جاف عند عدم الاستخدام
4. ضع مادة تشحيم صالحة للطعام على الأجزاء المتحركة حسب الحاجة" 
                                  className="min-h-32 text-right" 
                                  dir="rtl"
                                  value={field.value || ''}
                                  onChange={field.onChange}
                                />
                              </FormControl>
                              <FormDescription className="text-right">
                                أدخل نصائح الصيانة كقائمة مرقمة.
                              </FormDescription>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
            
            <div className="space-y-6">
              <Card>
                <CardContent className="pt-6">
                  <div className="space-y-4">
                    <FormField
                      control={form.control}
                      name="categoryId"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Category</FormLabel>
                          <Select 
                            onValueChange={field.onChange} 
                            defaultValue={field.value}
                            value={field.value}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Select a category" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              {isLoadingCategories ? (
                                <div className="flex items-center justify-center py-2">
                                  <Loader2 className="h-4 w-4 animate-spin" />
                                  <span className="ml-2">Loading...</span>
                                </div>
                              ) : categories && categories.length > 0 ? (
                                categories.map((category: any) => (
                                  <SelectItem key={category.id} value={category.id.toString()}>
                                    {category.name} {category.nameAr && `(${category.nameAr})`}
                                  </SelectItem>
                                ))
                              ) : (
                                <SelectItem value="no-categories" disabled>
                                  No categories available
                                </SelectItem>
                              )}
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <div className="mb-6">
                      <div className="flex items-center mb-4">
                        <Image className="h-5 w-5 mr-2 text-blue-600" />
                        <h3 className="text-lg font-medium">Product Image</h3>
                      </div>
                      
                      <FormField
                        control={form.control}
                        name="imageUrl"
                        render={({ field }) => (
                          <FormItem className="space-y-4">
                            <div className="p-4 bg-gradient-to-r from-blue-50 to-purple-50 border border-gray-200 rounded-md">
                              <FormLabel className="text-gray-700 font-medium">Product Image URL</FormLabel>
                              <div className="flex space-x-2">
                                <FormControl className="flex-grow">
                                  <Input 
                                    placeholder="https://example.com/image.jpg" 
                                    {...field} 
                                    className="bg-white border-gray-300"
                                  />
                                </FormControl>
                                {field.value && (
                                  <Button 
                                    type="button" 
                                    variant="outline" 
                                    className="flex items-center" 
                                    onClick={() => form.setValue('imageUrl', '')}
                                  >
                                    <Trash2 className="h-4 w-4 mr-1 text-red-500" />
                                    Clear
                                  </Button>
                                )}
                              </div>
                              <FormDescription className="flex items-center mt-2">
                                <Info className="h-4 w-4 text-blue-500 mr-1" />
                                Enter a valid URL for the main product image.
                              </FormDescription>
                              <FormMessage />
                            </div>
                            
                            {field.value && (
                              <div className="bg-white border border-gray-200 rounded-md overflow-hidden shadow-sm">
                                <div className="p-3 bg-gray-50 border-b border-gray-200 flex items-center justify-between">
                                  <h4 className="text-sm font-medium text-gray-700 flex items-center">
                                    <Image className="h-4 w-4 mr-1 text-gray-500" />
                                    Product Image Preview
                                  </h4>
                                  <div className="flex items-center space-x-2 text-xs text-gray-500">
                                    <span className="px-2 py-1 bg-gray-100 rounded">Main Image</span>
                                  </div>
                                </div>
                                <div className="p-4">
                                  <div className="relative border-2 border-dashed border-gray-200 rounded-md overflow-hidden mx-auto max-w-xs p-1">
                                    <div className="border rounded-md overflow-hidden h-52 w-full bg-gradient-to-r from-gray-50 to-white">
                                      <img 
                                        src={field.value} 
                                        alt="Product preview" 
                                        className="h-full w-full object-contain"
                                        onError={(e) => {
                                          const target = e.target as HTMLImageElement;
                                          target.src = 'https://placehold.co/600x400?text=Image+Not+Found';
                                        }}
                                      />
                                    </div>
                                  </div>
                                </div>
                              </div>
                            )}
                                  onError={(e) => {
                                    const target = e.target as HTMLImageElement;
                                    target.src = 'https://placehold.co/600x400?text=Image+Not+Found';
                                  }} 
                                />
                              </div>
                            </div>
                          )}
                        </FormItem>
                      )}
                    />
                    
                    <Separator className="my-4" />
                    
                    <FormField
                      control={form.control}
                      name="sku"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>SKU</FormLabel>
                          <FormControl>
                            <Input placeholder="e.g. PG-FEEDER-001" {...field} />
                          </FormControl>
                          <FormDescription>Stock Keeping Unit (product code)</FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <FormField
                        control={form.control}
                        name="weight"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Weight</FormLabel>
                            <FormControl>
                              <Input placeholder="e.g. 2.5 kg" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      
                      <FormField
                        control={form.control}
                        name="dimensions"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Dimensions</FormLabel>
                            <FormControl>
                              <Input placeholder="e.g. 30 x 20 x 15 cm" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                    
                    <FormField
                      control={form.control}
                      name="warrantyInfo"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Warranty Information</FormLabel>
                          <FormControl>
                            <Input placeholder="e.g. 1 year manufacturer warranty" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <Separator className="my-4" />
                    
                    <h3 className="text-lg font-medium">Product Tags</h3>
                    <p className="text-sm text-muted-foreground mb-4">Add tags to help customers find this product</p>
                    
                    <FormField
                      control={form.control}
                      name="tags"
                      render={({ field }) => (
                        <FormItem>
                          <FormControl>
                            <Input 
                              placeholder="e.g. feeder, poultry equipment, outdoor" 
                              value={field.value ? field.value.join(', ') : ''}
                              onChange={(e) => {
                                const tags = e.target.value 
                                  ? e.target.value.split(',').map(tag => tag.trim()) 
                                  : [];
                                field.onChange(tags);
                              }}
                            />
                          </FormControl>
                          <FormDescription>Separate multiple tags with commas</FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <Separator className="my-4" />
                    
                    <h3 className="text-lg font-medium">Additional Images</h3>
                    <p className="text-sm text-muted-foreground mb-4">Add multiple images to showcase your product</p>
                    
                    <FormField
                      control={form.control}
                      name="additionalImages"
                      render={({ field }) => (
                        <FormItem>
                          <div className="space-y-2">
                            {field.value && Array.isArray(field.value) && field.value.map((imageUrl, index) => (
                              <div key={index} className="flex items-center space-x-2">
                                <Input 
                                  placeholder="Image URL"
                                  value={imageUrl}
                                  onChange={(e) => {
                                    const newImages = [...field.value];
                                    newImages[index] = e.target.value;
                                    field.onChange(newImages);
                                  }}
                                />
                                <Button
                                  type="button"
                                  variant="destructive"
                                  size="icon"
                                  onClick={() => {
                                    const newImages = field.value.filter((_, i) => i !== index);
                                    field.onChange(newImages);
                                  }}
                                >
                                  <Trash2 className="h-4 w-4" />
                                </Button>
                              </div>
                            ))}
                            <Button
                              type="button"
                              variant="outline"
                              className="w-full"
                              onClick={() => {
                                const currentImages = field.value || [];
                                field.onChange([...currentImages, '']);
                              }}
                            >
                              <Plus className="mr-2 h-4 w-4" />
                              Add Image
                            </Button>
                          </div>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <Separator className="my-4" />
                    
                    <h3 className="text-lg font-medium">Product Features</h3>
                    <p className="text-sm text-muted-foreground mb-4">List the key features of this product</p>
                    
                    <FormField
                      control={form.control}
                      name="features"
                      render={({ field }) => (
                        <FormItem>
                          <div className="space-y-2">
                            {field.value && Array.isArray(field.value) && field.value.map((feature, index) => (
                              <div key={index} className="flex items-center space-x-2">
                                <Input 
                                  placeholder="e.g. Weather-resistant design"
                                  value={feature}
                                  onChange={(e) => {
                                    const newFeatures = [...field.value];
                                    newFeatures[index] = e.target.value;
                                    field.onChange(newFeatures);
                                  }}
                                />
                                <Button
                                  type="button"
                                  variant="destructive"
                                  size="icon"
                                  onClick={() => {
                                    const newFeatures = field.value.filter((_, i) => i !== index);
                                    field.onChange(newFeatures);
                                  }}
                                >
                                  <Trash2 className="h-4 w-4" />
                                </Button>
                              </div>
                            ))}
                            <Button
                              type="button"
                              variant="outline"
                              className="w-full"
                              onClick={() => {
                                const currentFeatures = field.value || [];
                                field.onChange([...currentFeatures, '']);
                              }}
                            >
                              <Plus className="mr-2 h-4 w-4" />
                              Add Feature
                            </Button>
                          </div>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <Separator className="my-4" />
                    
                    <h3 className="text-lg font-medium">Product Specifications</h3>
                    <p className="text-sm text-muted-foreground mb-4">Add technical specifications for your product</p>
                    
                    <FormField
                      control={form.control}
                      name="specs"
                      render={({ field }) => (
                        <FormItem>
                          <div className="space-y-2">
                            {field.value && typeof field.value === 'object' && Object.entries(field.value).map(([key, value], index) => (
                              <div key={index} className="grid grid-cols-2 gap-2">
                                <Input 
                                  placeholder="Specification name"
                                  value={key}
                                  onChange={(e) => {
                                    const newSpecs = { ...field.value };
                                    const oldKey = key;
                                    delete newSpecs[oldKey];
                                    newSpecs[e.target.value] = value;
                                    field.onChange(newSpecs);
                                  }}
                                />
                                <div className="flex items-center space-x-2">
                                  <Input 
                                    placeholder="Specification value"
                                    value={value as string}
                                    onChange={(e) => {
                                      const newSpecs = { ...field.value };
                                      newSpecs[key] = e.target.value;
                                      field.onChange(newSpecs);
                                    }}
                                  />
                                  <Button
                                    type="button"
                                    variant="destructive"
                                    size="icon"
                                    onClick={() => {
                                      const newSpecs = { ...field.value };
                                      delete newSpecs[key];
                                      field.onChange(newSpecs);
                                    }}
                                  >
                                    <Trash2 className="h-4 w-4" />
                                  </Button>
                                </div>
                              </div>
                            ))}
                            <Button
                              type="button"
                              variant="outline"
                              className="w-full"
                              onClick={() => {
                                const currentSpecs = field.value || {};
                                field.onChange({ ...currentSpecs, '': '' });
                              }}
                            >
                              <Plus className="mr-2 h-4 w-4" />
                              Add Specification
                            </Button>
                          </div>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={form.control}
                      name="featured"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                          <div className="space-y-0.5">
                            <FormLabel>Featured Product</FormLabel>
                            <FormDescription>
                              Display this product on the homepage
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={form.control}
                      name="inStock"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                          <div className="space-y-0.5">
                            <FormLabel>In Stock</FormLabel>
                            <FormDescription>
                              Is this product currently available?
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                  </div>
                </CardContent>
              </Card>
              
              <div className="sticky top-4">
                <Button 
                  type="submit" 
                  className="w-full" 
                  disabled={mutation.isPending}
                >
                  {mutation.isPending ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      {isEditing ? 'Updating...' : 'Creating...'}
                    </>
                  ) : (
                    <>
                      <Save className="mr-2 h-4 w-4" />
                      {isEditing ? 'Update Product' : 'Create Product'}
                    </>
                  )}
                </Button>
              </div>
            </div>
          </div>
        </form>
      </Form>
    </AdminLayout>
  );
}